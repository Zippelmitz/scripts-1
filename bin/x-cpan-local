#!/usr/bin/env perl
#
# Creates a local installation of CPAN modules and runs CPAN shell properly
# configured to use it
#

use strict;
use warnings;
use File::Spec;
use File::Path;
use CPAN ();
use Data::Dumper;

# We need a name argument and make sure its valid
my ($name) = @ARGV;

if (!$name) {
  usage();
  exit(2);
}

if ($name !~ /^[a-zA-Z0-9_.-]+$/) {
  fatal(
    "name of local repo is invalid - '$name'",
    "Must be composed of letters, numbers, dash, dot, and underscore",
  );
}


# Make sure we have the directory for the local perl lib
my $base_dir = File::Spec->catdir($ENV{HOME}, '.my_perl_lib', $name);
make_sure_dir_exists($base_dir);


# Make sure we have a local config file, create one if we need to
my $local_cfg_dir = File::Spec->catdir($base_dir, 'CPAN');
make_sure_dir_exists($local_cfg_dir);

my $name_config = File::Spec->catfile($local_cfg_dir, 'MyConfig.pm');
if (! -e $name_config) {
  create_initial_file($name_config, $base_dir);
}

# Load the local configuration file
unshift @INC, $base_dir;
require CPAN::MyConfig;

# Run the CPAN shell
CPAN::shell(Local::Prompt->new($name));


###########
# Utilities

sub usage {
  print <<"  USAGE";
Usage: x-cpan-local NAME

Creates a local directory to install modules named `NAME`.
Add `$ENV{HOME}/.my_perl_lib/NAME` to your lib to use.

  USAGE
}

sub fatal {
  my ($msg, @extra) = @_;
  
  print "FATAL: $msg\n";
  foreach my $extra (@extra) {
    print "    $extra\n";
  }
  exit(1);
}

sub make_sure_dir_exists {
  my $dir = shift;
  
  return if -d $dir;

  mkpath($dir, { verbose => 0, error => \my $err });
  
  unless (-d $dir) {
    map { my ($p, $m) = %$_; $_ = "$m creating '$p'" } @$err;
    fatal("Could not create base directory '$base_dir'", @$err);
  }
  
  return $dir;
}

sub create_initial_file {
  my ($file_name, $base_dir) = @_;
  
  # Load the current CPAN shell configuration
  CPAN::HandleConfig->load;
  
  # remove any sudo's from some of the command lines
  my $cc = $CPAN::Config;
  while (my ($k, $v) = each %$cc) {
    next unless $k =~ /_command$/ && $v;
    $cc->{$k} =~ s/^\s*sudo\s+//;
  }
  
  # make sure the instalations will be local
  my ($k, $v);
  
  # ... for Makefile.PL based installs
  $k = 'makepl_arg';
  $v = $cc->{$k} || '';
  $v = ($v? "$v " : '')
     . "LIB=$base_dir/lib "
     . "INSTALLMAN1DIR=$base_dir/man/man1 "
     . "INSTALLMAN3DIR=$base_dir/man/man3 "
     . "INSTALLSCRIPT=$base_dir/bin "
     . "INSTALLBIN=$base_dir/bin";
  $cc->{$k} = $v;
  
  # ... for Build.PL based installs
  $k = 'mbuildpl_arg';
  $v = $cc->{$k} || '';
  $v = ($v? "$v " : '')
     . "--lib=$base_dir/lib "
     . "--installman1dir=$base_dir/man/man1 "
     . "--installman3dir=$base_dir/man/man3 "
     . "--installscript=$base_dir/bin "
     . "--installbin=$base_dir/bin";     
  $cc->{$k} = $v;
  
  # Lets lie about where we came from
  # We use this trick to make sure commit inside the shell will write to
  # the proper place
  $INC{'CPAN/MyConfig.pm'} = $file_name;

  # and let CPAN do all the work
  CPAN::HandleConfig->commit;
}


##########################################################
# Create a new CPAN Shell prompt with our local name on it

package Local::Prompt;

use base 'CPAN::Prompt';

sub new {
  my $class = shift;
  my $name  = shift;
  
  my $self = $class->SUPER::new(@_);
  $self->{local_name} = $name || '';
  
  return $self;
}

sub as_string {
  my $self = shift;
  
  my $prompt = $self->SUPER::as_string(@_);

  return "[$self->{local_name}] $prompt";
}

1;
