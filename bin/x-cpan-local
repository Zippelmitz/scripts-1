#!/usr/bin/env perl
#
# Creates a local installation of CPAN modules and runs CPAN shell properly
# configured to use it
#

use strict;
use warnings;
use File::Spec;
use File::Path;
use CPAN ();

# We need a name argument and make sure its valid
my ($name) = @ARGV;

if (!$name) {
  usage();
  exit(2);
}

if ($name !~ /^[a-zA-Z0-9_.-]+$/) {
  fatal(
    "name of local repo is invalid - '$name'",
    "Must be composed of letters, numbers, dash, dot, and underscore",
  );
}


# Make sure we have the directory for the local perl lib
my $base_dir = File::Spec->catdir($ENV{HOME}, '.my_perl_lib', $name);
make_sure_dir_exists($base_dir);


# Make sure we have a local config file, create one if we need to
my $local_cfg_dir = File::Spec->catdir($base_dir, 'CPAN');
make_sure_dir_exists($local_cfg_dir);

my $name_config = File::Spec->catfile($local_cfg_dir, 'MyConfig.pm');
if (! -e $name_config) {
  create_initial_file($name_config);
}

# Load the local configuration file
unshift @INC, $base_dir;
require CPAN::MyConfig;

# Run the CPAN shell
CPAN::shell();


###########
# Utilities

sub load_cpan_config {
  my @dirs_to_search;
  
  eval {
    require File::HomeDir;
    push @dirs_to_search, File::HomeDir->my_data;
    push @dirs_to_search, File::HomeDir->my_home;
  };    
  push @dirs_to_search, $ENV{HOME};
  
  unshift @INC, grep { $_ } @dirs_to_search;
  
  eval { require CPAN::MyConfig };
  eval { require CPAN::Config } unless $INC{'CPAN/MyConfig.pm'};
  
  # As a default, use an empty config
  # We will fill the details later
  # $CPAN::Config ||= {};
}


sub usage {
  print <<"  USAGE";
Usage: x-cpan-local NAME

Creates a local directory to install modules named `NAME`.
Add `$ENV{HOME}/.my_perl_lib/NAME` to your lib to use.

  USAGE
}

sub fatal {
  my ($msg, @extra) = @_;
  
  print "FATAL: $msg\n";
  foreach my $extra (@extra) {
    print "    $extra\n";
  }
  exit(1);
}

sub make_sure_dir_exists {
  my $dir = shift;
  
  return if -d $dir;

  mkpath($dir, { verbose => 0, error => \my $err });
  
  unless (-d $dir) {
    map { my ($p, $m) = %$_; $_ = "$m creating '$p'" } @$err;
    fatal("Could not create base directory '$base_dir'", @$err);
  }
  
  return $dir;
}

sub create_initial_file {
  
}


1;
