#!/usr/bin/env perl

use strict;
use 5.014;
use TextMate::JumpTo qw( tm_location );
use HTML::Tiny;
use File::Temp qw( tempfile );
use Data::Dump 'pp';

$| = 1;

my ($t, @args) = _args();
my ($w, $h)    = _html_output();

$w->(
  $h->open('html'),
  $h->head(
    $h->meta(
      {'http-equiv' => 'Content-Type', content => 'text/html; charset=utf-8'}
    ),
    $h->title("Search results for $t"),
    $h->style(
      do { local $/; <DATA> }
    ),
    $h->script(
      { src =>
          'https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js'
      }
    ),
  ),
  $h->open('body'),
);

open my $ack, '-|', 'ack', @args or die "Can't run ack ($!)";

my $state = 'file';
my $cfile;

LINE:
while (defined(my $line = <$ack>)) {
  chomp $line;

  given ($state) {
    when ('file') {
      next if /^\s*$/;
      $w->(
        $h->h1($h->a({href => tm_location(file => $line, line => 1)}, $line))
      );
      $w->($h->open('div'));

      $state = 'in_block';
      $cfile = $line;
      next LINE;
    }
    when ('in_block') {
      if (my ($ln, $f, $info) = $line =~ m/^(\d+)([:-])(.*)$/) {
        my $matched = $f eq ':';
        my $url = tm_location(file => $cfile, line => $ln);
        $info =~ s/\t/  /g;
        $info =~ s/&/&lt;/g;
        $info =~ s/</&lt;/g;
        $info =~ s/>/&gt;/g;

        $w->(
          $h->p(
            {class => ($matched && 'matched')},
            [ $h->a(
                {href => $url},
                [ $h->span({class => 'ln'},   $ln),
                  $h->span({class => 'code'}, $info)
                ]
              ),
            ]
          )
        );
      }
      elsif (my ($sep) = $line =~ m/^(--)?\s*$/) {
        $w->($h->close('div'));
        $w->($h->open('div')) if $sep;
        $state = 'file' unless $sep;
      }
    }
  }
}
close $ack;

my $hover_js = <<'EOS';
$(function () {
  $('.matched').hover(function () { $(this).toggleClass('hover'); });  
});
EOS

$w->(
  $h->close('div'),  $h->script([$hover_js]),
  $h->close('body'), $h->close('html'),
);
_open($w->(), 0);

sub _open {
  my ($url, $bg) = @_;
  my @cmd = ('/usr/bin/open', ($bg ? ('-g') : ()), $url);
  system @cmd and die "Can't open $url ($?)";
}

sub _args {
  my @args =
    grep { $_ ne '--color' && $_ ne '--noheading' && $_ ne '--nobreak' }
    @ARGV;

  my $title = join(' ', @args);

  unshift @args, '--nocolor' unless grep { $_ eq '--nocolor' } @args;
  unshift @args, '--heading' unless grep { $_ eq '--heading' } @args;
  unshift @args, '--break'   unless grep { $_ eq '--break' } @args;
  unshift @args, '--context=3'
    unless grep { $_ =~ /^(--context=\d+)|(-C)$/ } @args;

  return ($title, @args);
}

sub _html_output {
  my $h = HTML::Tiny->new;
  my ($fh, $filename) = tempfile(SUFFIX => '.html');

  my $w = sub {
    return $fh->print(@_) if @_;

    close($fh);
    return $filename;
  };

  return ($w, $h);
}

__DATA__

html, body {
  font-family: monospace;
  background: black;
}

a {
  text-decoration: none;
  width: 100%;
}

h1 {
  text-align: left;
  border-bottom: 1px solid #222;
  color: #ccc;
  padding-top: 10px;
  padding-bottom: 3px;
  margin-bottom: 3px;
}

p {
  color: #eee;
  margin: 0px;
  padding-left: 0 10px 0 10px;
}

.matched {
  background: #111;
  color: #fff;
}


.ln {
  color: #444;
  width: 5em;
  text-align: right;
  padding-right: 1em;
}

.code {
  color: #eee;
}

.matched .code {
  color: #fff;
}

p.hover {
  background: #555;
}
